import React from 'react';
import { BrowserRouter as Router, Route, Redirect } from 'react-router-dom';
import { ApolloProvider } from 'react-apollo';

import { ApolloClient } from 'apollo-client';
import { InMemoryCache } from 'apollo-cache-inmemory';
import { onError } from 'apollo-link-error';
import { withClientState } from 'apollo-link-state';
import { ApolloLink, Observable, split } from 'apollo-link';
import { setContext } from 'apollo-link-context';

import { HttpLink } from 'apollo-link-http';
import { getMainDefinition } from 'apollo-utilities';

import { Provider } from 'react-redux';
import { PersistGate } from 'redux-persist/integration/react';

import { store, persistor } from './reducers';
import 'antd/dist/antd.css';
import './App.css';

// generated by Fragment Matcher plugin

import AccountCenter from './components/AccountCenter';
import AccountSettings from './components/AccountSettings';
import BasicLayout from './components/BasicLayout';
import User from './components/User';
import Workplace from './components/Workplace';

// Create an http link:
const httpLink = new HttpLink({
  uri: 'http://localhost:4000/graphql'
});

const afterwareLink = new ApolloLink((operation, forward) => forward(operation).map((response) => {
  // const { response: { headers } } = operation.getContext();

  // if (headers) {
  //   const authorizationToken = headers.get('authorizationToken');
  //   if (authorizationToken) {
  //     localStorage.setItem('authorizationToken', authorizationToken);
  //   }
  // }

  return response;
}));

// using the ability to split links, you can send data to each link
// depending on what kind of operation is being sent
const link = split(
  // split based on operation type
  ({ query }) => {
    const definition = getMainDefinition(query);
    return (
      definition.kind === 'OperationDefinition'
      && definition.operation === 'subscription'
    );
  },
  afterwareLink.concat(httpLink),
);

const cache = new InMemoryCache({
  dataIdFromObject: (object) => object[`${object.__typename.toLowerCase()}Id`],
});

const request = async (operation) => {
  // const authorizationToken = sessionStorage.getItem('authorizationToken');
  operation.setContext({
    headers: {
      Authorization: 'Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ1c2VybmFtZSI6InFpZGlhbiIsImlhdCI6MTU5OTI1NDc3NiwiZXhwIjoxNjAyODU0Nzc2fQ.oH9mG3e5xMenQwmel6LtsvSBxBkGxEd0GJd03IlKpkI',
    },
  });
};

const authLink = setContext((_, { headers }) => ({
  headers: {
    ...headers,
    Authorization: 'Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ1c2VybmFtZSI6InFpZGlhbiIsImlhdCI6MTU5OTI1NDc3NiwiZXhwIjoxNjAyODU0Nzc2fQ.oH9mG3e5xMenQwmel6LtsvSBxBkGxEd0GJd03IlKpkI',
  },
}));

const requestLink = new ApolloLink((operation, forward) => new Observable((observer) => {
  let handle;
  Promise.resolve(operation)
    .then((oper) => request(oper))
    .then(() => {
      handle = forward(operation).subscribe({
        next: observer.next.bind(observer),
        error: observer.error.bind(observer),
        complete: observer.complete.bind(observer),
      });
    })
    .catch(observer.error.bind(observer));

  return () => {
    if (handle) handle.unsubscribe();
  };
}));

const client = new ApolloClient({
  link: authLink.concat(httpLink),
  cache,
});

const ProtectedRoute = ({ component, ...rest }) => (
  <Route
    {...rest}
    render={({ location }) => (sessionStorage.getItem('authToken') ? (
      <BasicLayout component={component} />
    ) : (
      <Redirect
        to={{
          pathname: '/user/login',
          state: { from: location },
        }}
      />
    ))}
  />
);

const App = () => (
  <Provider store={store}>
    <PersistGate loading={null} persistor={persistor}>
      <ApolloProvider client={client}>
        <Router>
          <Route path="/user" component={User} />
          <ProtectedRoute path="/" exact component={Workplace} />
          <ProtectedRoute path="/account/center" component={AccountCenter} />
          <ProtectedRoute path="/account/settings" component={AccountSettings} />
        </Router>
      </ApolloProvider>
    </PersistGate>
  </Provider>
);

export default App;
